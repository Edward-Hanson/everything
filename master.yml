AWSTemplateFormatVersion: '2010-09-09'
Description: Master Stack to deploy CloudBasedProject infrastructure.

Parameters:
  ProjectName:
    Type: String
    Default: cloudbasedproject-1

  DatabaseUsername:
    Type: String
    Default: cloudbasedapp

  DatabasePassword:
    Type: String
    NoEcho: true
    Default: cloudbasedapp123

  ImageTag:
    Type: String
    Default: latest



Resources:

################################ VPC Stack ##########################################

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-vpc'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-igw'

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-public-az1'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.2.0/24
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-public-az2'

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.10.0/24
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-private-az1'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.11.0/24
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-private-az2'

  DatabaseSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.20.0/24
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-db-az1'

  DatabaseSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.21.0/24
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-db-az2'

  # NAT Gateways
  NatEIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatEIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-nat-1'

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP2.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-nat-2'

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  DBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DBSubnet1Assoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DatabaseSubnet1
      RouteTableId: !Ref DBRouteTable

  DBSubnet2Assoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DatabaseSubnet2
      RouteTableId: !Ref DBRouteTable

  # S3 Gateway Endpoint
  S3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref VPC
      RouteTableIds:
        - !Ref PrivateRouteTable1
        - !Ref PrivateRouteTable2
      VpcEndpointType: Gateway


# ################################ Security Groups Stack ##########################################

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ProjectName}-alb-sg'
      GroupDescription: Allow HTTP/HTTPS traffic from anywhere
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-alb-sg'

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ProjectName}-ecs-sg'
      GroupDescription: Allow traffic from ALB to ECS on port 2020
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2021
          ToPort: 2021
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ProjectName}-db-sg'
      GroupDescription: Allow ECS tasks to access RDS PostgreSQL (5432)
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ECSSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0


# ################################ RDS Stack ##########################################

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub '${ProjectName}-db-subnet-group'
      DBSubnetGroupDescription: DB subnet group for RDS
      SubnetIds:
        - !Ref DatabaseSubnet1
        - !Ref DatabaseSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-db-subnet-group'

  DatabaseParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Family: postgres17
      Description: PostgreSQL 17 parameter group
      Parameters:
        log_min_duration_statement: 500
        log_statement: all
        shared_preload_libraries: pg_stat_statements
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-db-param-group'

  DatabaseInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    Properties:
      DBInstanceIdentifier: !Sub '${ProjectName}-rds'
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: 17.5
      MasterUsername: !Ref DatabaseUsername
      MasterUserPassword: !Ref DatabasePassword
      AllocatedStorage: 20
      StorageEncrypted: true
      MultiAZ: true
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      DBParameterGroupName: !Ref DatabaseParameterGroup
      BackupRetentionPeriod: 7
      PreferredBackupWindow: '02:00-03:00'
      PreferredMaintenanceWindow: 'sun:03:00-sun:04:00'
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-rds'

  DatabaseSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${ProjectName}-db-credentials'
      Description: RDS credentials for PostgreSQL
      SecretString: !Sub |
        {
          "username": "${DatabaseUsername}",
          "password": "${DatabasePassword}",
          "host": "${DatabaseInstance.Endpoint.Address}",
          "port": "5432",
          "dbname": "postgres"
        }
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-db-secret'


# ################################### ECS Stack ##########################################


  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/${ProjectName}'
      RetentionInDays: 14

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${ProjectName}-alb'
      Scheme: internet-facing
      Type: application
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-alb'

  BlueTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${ProjectName}-blue-tg'
      Port: 2021
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckPath: /actuator/health
      HealthCheckProtocol: HTTP
      HealthCheckPort: 2021
      Matcher:
        HttpCode: 200

  GreenTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${ProjectName}-green-tg'
      Port: 2021
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckPath: /actuator/health
      HealthCheckProtocol: HTTP
      HealthCheckPort: 2021
      Matcher:
        HttpCode: 200


  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref BlueTG


  ALBTestListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 8080
      Protocol: HTTP
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: 404
            ContentType: text/plain
            MessageBody: "No default test target group. CodeDeploy owns this listener."


  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${ProjectName}-cluster'
      CapacityProviders: [FARGATE, FARGATE_SPOT]
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 4
      ClusterSettings:
        - Name: containerInsights
          Value: enabled


  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-ecs-execution-role'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: AllowSecretsAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource:
                  - !Ref DatabaseSecret

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-ecs-task-role'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${ProjectName}-bucket'
                  - !Sub 'arn:aws:s3:::${ProjectName}-bucket/*'

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${ProjectName}-task'
      NetworkMode: awsvpc
      RequiresCompatibilities: 
        - FARGATE
      Cpu: 512
      Memory: 1024
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: !Sub '${ProjectName}-container'
          Image: !Sub '343218213563.dkr.ecr.eu-west-1.amazonaws.com/${ProjectName}-repo:${ImageTag}'
          PortMappings:
            - ContainerPort: 2021
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: DB_HOST
              Value: !GetAtt DatabaseInstance.Endpoint.Address
            - Name: DB_PORT
              Value: 5432
            - Name: DB_NAME
              Value: postgres
          Secrets:
            - Name: DB_USERNAME
              ValueFrom: !Sub 
                - '${SecretArn}:username::'
                - SecretArn: !Ref DatabaseSecret
            - Name: DB_PASSWORD
              ValueFrom: !Sub 
                - '${SecretArn}:password::'
                - SecretArn: !Ref DatabaseSecret
          HealthCheck:
            Command: 
              - CMD-SHELL
              - "curl -f http://localhost:2021/actuator/health || exit 1"
            Interval: 30
            Timeout: 10
            Retries: 3
            StartPeriod: 60
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-task'


  ECSService:
    Type: AWS::ECS::Service
    DependsOn: 
      - ALBListener
      - ALBTestListener
    Properties:
      ServiceName: !Sub '${ProjectName}-service'
      LaunchType: FARGATE
      Cluster: !Ref ECSCluster
      DesiredCount: 2
      TaskDefinition: !Ref TaskDefinition
      DeploymentController:
        Type: CODE_DEPLOY
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref ECSSecurityGroup
      LoadBalancers:  
        - ContainerName: !Sub '${ProjectName}-container'
          ContainerPort: 2021
          TargetGroupArn: !Ref BlueTG  


  

################################ CodeDeploy Stack ##########################################


  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub '${ProjectName}-app'
      ComputePlatform: ECS


  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-codedeploy-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeDeployECSInlinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:*
                  - elasticloadbalancing:*
                  - codedeploy:*
                  - iam:PassRole
                  - cloudwatch:*
                Resource: "*"

  ECSBlueGreenDeployment:
    Type: AWS::CodeDeploy::DeploymentGroup
    DependsOn: CodeDeployApplication
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: !Sub '${ProjectName}-deployment-group'
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
      DeploymentConfigName: CodeDeployDefault.ECSAllAtOnce
      DeploymentStyle:
        DeploymentType: BLUE_GREEN
        DeploymentOption: WITH_TRAFFIC_CONTROL
      ECSServices:
        - ClusterName: !Sub '${ProjectName}-cluster'
          ServiceName: !Sub '${ProjectName}-service'
      LoadBalancerInfo:
        TargetGroupPairInfoList:
          - TargetGroups:
              - Name: !Sub '${ProjectName}-blue-tg'
              - Name: !Sub '${ProjectName}-green-tg'
            ProdTrafficRoute:
              ListenerArns:
                - !Ref ALBListener
            TestTrafficRoute:
              ListenerArns:
                - !Ref ALBTestListener
      BlueGreenDeploymentConfiguration:
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: TERMINATE
          TerminationWaitTimeInMinutes: 1
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT


##################################### Code pipeline ###########################################

  
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-codepipeline-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: FullPipelineAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub 'arn:aws:s3:::${CodePipelineArtifactBucket}'
                  - !Sub 'arn:aws:s3:::cloudbasedproject-1-artifact-343218213563-eu-west-1/*'

              - Effect: Allow
                Action:
                  - ecs:RegisterTaskDefinition
                  - ecs:DescribeServices
                  - ecs:UpdateService
                Resource: '*'

              - Effect: Allow
                Action:
                  - codedeploy:*
                Resource: '*'

              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: '*'

              - Effect: Allow
                Action:
                  - logs:*
                  - cloudwatch:*
                Resource: '*'

              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'



  CodePipelineArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-artifact-${AWS::AccountId}-${AWS::Region}'
      VersioningConfiguration:
        Status: Enabled

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub '${ProjectName}-pipeline'
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactBucket
      RestartExecutionOnUpdate: true
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: 1
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                S3Bucket: !Ref CodePipelineArtifactBucket
                S3ObjectKey: source.zip
                PollForSourceChanges: false
              RunOrder: 1

        - Name: Deploy
          Actions:
            - Name: DeployToECS
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeployToECS
                Version: 1
              InputArtifacts:
                - Name: SourceOutput
              Configuration:
                ApplicationName: !Sub '${ProjectName}-app'
                DeploymentGroupName: !Sub '${ProjectName}-deployment-group'
                TaskDefinitionTemplateArtifact: SourceOutput
                AppSpecTemplateArtifact: SourceOutput
                AppSpecTemplatePath: appspec.yaml
                TaskDefinitionTemplatePath: taskdef.json
              RunOrder: 1


######################################## Event Bridge and Lambda function for automation( CD) ##########################################

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-lambda-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CodePipelineAndS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codepipeline:StartPipelineExecution
                Resource: !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${ProjectName}-pipeline'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: 
                  - !Sub 'arn:aws:s3:::${CodePipelineArtifactBucket}/*'
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:DescribeRepositories
                  - ecr:DescribeImages
                Resource: '*'
  

  EventBridgeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-eventbridge-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt PipelineTriggerFunction.Arn



  EventBridgeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-eventbridge-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt PipelineTriggerFunction.Arn

  PipelineTriggerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-pipeline-trigger'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          import json
          import boto3
          import zipfile
          import io
          import os
          import logging
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              logger.info(f"Lambda function started with event: {json.dumps(event, indent=2)}")
              
              try:
                  # Validate event structure
                  if 'detail' not in event:
                      logger.error("Event does not contain 'detail' field")
                      return {'statusCode': 400, 'body': json.dumps({'error': 'Invalid event structure'})}
                  
                  detail = event['detail']
                  
                  # Check if all required fields are present
                  required_fields = ['repository-name', 'image-tag', 'registry-id']
                  for field in required_fields:
                      if field not in detail:
                          logger.error(f"Missing required field: {field}")
                          return {'statusCode': 400, 'body': json.dumps({'error': f'Missing field: {field}'})}
                  
                  repository_name = detail['repository-name']
                  image_tag = detail['image-tag']
                  registry_id = detail['registry-id']
                  
                  logger.info(f"Processing ECR push event for repository: {repository_name}, tag: {image_tag}")
                  
                  # Construct the full image URI
                  image_uri = f"{registry_id}.dkr.ecr.{os.environ['AWS_REGION']}.amazonaws.com/{repository_name}:{image_tag}"
                  logger.info(f"Constructed image URI: {image_uri}")
                  
                  # Initialize AWS clients
                  s3 = boto3.client('s3')
                  codepipeline = boto3.client('codepipeline')
                  
                  bucket_name = os.environ['ARTIFACT_BUCKET']
                  project_name = os.environ['PROJECT_NAME']
                  
                  logger.info(f"Using S3 bucket: {bucket_name}, Project: {project_name}")
                  
                  # Download existing source.zip from S3
                  logger.info("Downloading existing source.zip...")
                  try:
                      response = s3.get_object(Bucket=bucket_name, Key='source.zip')
                      zip_content = response['Body'].read()
                      logger.info("Successfully downloaded source.zip")
                  except Exception as e:
                      logger.error(f"Failed to download source.zip: {str(e)}")
                      raise
                  
                  # Extract files from ZIP
                  try:
                      with zipfile.ZipFile(io.BytesIO(zip_content), 'r') as zip_ref:
                          # List files in ZIP
                          file_list = zip_ref.namelist()
                          logger.info(f"Files in ZIP: {file_list}")
                          
                          # Read appspec.yaml
                          appspec_content = zip_ref.read('appspec.yaml').decode('utf-8')
                          logger.info("Successfully read appspec.yaml")
                          
                          # Read taskdef.json
                          taskdef_content = zip_ref.read('taskdef.json').decode('utf-8')
                          logger.info("Successfully read taskdef.json")
                          
                          # Parse and update taskdef.json with new image URI
                          taskdef_json = json.loads(taskdef_content)
                          
                          # Update the image URI in the task definition
                          if 'containerDefinitions' in taskdef_json:
                              for container in taskdef_json['containerDefinitions']:
                                  container['image'] = image_uri
                                  logger.info(f"Updated container image to: {image_uri}")
                          
                  except Exception as e:
                      logger.error(f"Failed to extract files from ZIP: {str(e)}")
                      raise
                  
                  # Create new ZIP with updated files
                  try:
                      zip_buffer = io.BytesIO()
                      with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
                          zip_file.writestr('appspec.yaml', appspec_content)
                          zip_file.writestr('taskdef.json', json.dumps(taskdef_json, indent=2))
                      logger.info("Successfully created new ZIP file")
                  except Exception as e:
                      logger.error(f"Failed to create new ZIP: {str(e)}")
                      raise
                  
                  # Upload updated ZIP to S3
                  try:
                      logger.info("Uploading updated source.zip...")
                      s3.put_object(
                          Bucket=bucket_name,
                          Key='source.zip',
                          Body=zip_buffer.getvalue(),
                          ContentType='application/zip'
                      )
                      logger.info("Successfully uploaded updated source.zip")
                  except Exception as e:
                      logger.error(f"Failed to upload updated ZIP: {str(e)}")
                      raise
                  
                  # Trigger CodePipeline
                  try:
                      pipeline_name = f'{project_name}-pipeline'
                      logger.info(f"Starting pipeline execution for: {pipeline_name}")
                      
                      pipeline_response = codepipeline.start_pipeline_execution(
                          name=pipeline_name
                      )
                      
                      execution_id = pipeline_response['pipelineExecutionId']
                      logger.info(f"Pipeline execution started successfully: {execution_id}")
                      
                      return {
                          'statusCode': 200,
                          'body': json.dumps({
                              'message': 'Pipeline triggered successfully',
                              'imageUri': image_uri,
                              'executionId': execution_id,
                              'repository': repository_name,
                              'imageTag': image_tag
                          })
                      }
                      
                  except Exception as e:
                      logger.error(f"Failed to start pipeline execution: {str(e)}")
                      raise
                      
              except Exception as e:
                  logger.error(f"Lambda function failed with error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps({
                          'error': str(e),
                          'message': 'Lambda function execution failed'
                      })
                  }
      Environment:
        Variables:
          ARTIFACT_BUCKET: !Ref CodePipelineArtifactBucket
          PROJECT_NAME: !Ref ProjectName


  ECRPushEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${ProjectName}-ecr-push-rule'
      Description: 'Trigger pipeline when new image is pushed to ECR'
      EventPattern:
        source: ["aws.ecr"]
        detail-type: ["ECR Image Action"]
        detail:
          action-type: ["PUSH"]
          repository-name:
            - "cloudbasedproject-1-repo"
          result: ["SUCCESS"]
      State: ENABLED
      Targets:
        - Arn: !GetAtt PipelineTriggerFunction.Arn
          Id: "PipelineTriggerTarget"
          RoleArn: !GetAtt EventBridgeLambdaRole.Arn

  # Lambda Permission for EventBridge
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PipelineTriggerFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ECRPushEventRule.Arn



# Add this section at the end of your CloudFormation template
Outputs:
  AccountId:
    Description: AWS Account ID
    Value: !Ref AWS::AccountId
    Export:
      Name: !Sub '${ProjectName}-AccountId'

  Region:
    Description: AWS Region
    Value: !Ref AWS::Region
    Export:
      Name: !Sub '${ProjectName}-Region'

  DatabaseHost:
    Description: RDS Database Host
    Value: !GetAtt DatabaseInstance.Endpoint.Address
    Export:
      Name: !Sub '${ProjectName}-DatabaseHost'

  DatabaseSecretArn:
    Description: Database Secret ARN
    Value: !Ref DatabaseSecret
    Export:
      Name: !Sub '${ProjectName}-DatabaseSecretArn'

  PrivateSubnet1Id:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub '${ProjectName}-PrivateSubnet1'

  PrivateSubnet2Id:
    Description: Private Subnet 2 ID
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub '${ProjectName}-PrivateSubnet2'

  ECSSecurityGroupId:
    Description: ECS Security Group ID
    Value: !Ref ECSSecurityGroup
    Export:
      Name: !Sub '${ProjectName}-ECSSecurityGroup'

  TaskExecutionRoleArn:
    Description: Task Execution Role ARN
    Value: !GetAtt TaskExecutionRole.Arn
    Export:
      Name: !Sub '${ProjectName}-TaskExecutionRoleArn'

  TaskRoleArn:
    Description: Task Role ARN
    Value: !GetAtt TaskRole.Arn
    Export:
      Name: !Sub '${ProjectName}-TaskRoleArn'

  ImageURI:
    Description: Container Image URI
    Value: !Sub '343218213563.dkr.ecr.eu-west-1.amazonaws.com/${ProjectName}-repo:${ImageTag}'
    Export:
      Name: !Sub '${ProjectName}-ImageURI'